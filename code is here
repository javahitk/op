Q1.#include <stdio.h>
#include <math.h>

#define D 2      // Dimensions
#define C 2      // Number of clusters
#define M 1.26   // Fuzziness
#define ITER 5   // Number of iterations

double data[100][D];     // Max 100 data points
double U[100][C];        // Membership matrix
double centers[C][D];    // Cluster centers

int N; // Number of data points

// Function to update cluster centers
void updateCenters() {
    for (int j = 0; j < C; j++) {
        double numerator[D] = {0.0};
        double denominator = 0.0;
        for (int i = 0; i < N; i++) {
            double u_ij_m = pow(U[i][j], M);
            for (int k = 0; k < D; k++) {
                numerator[k] += u_ij_m * data[i][k];
            }
            denominator += u_ij_m;
        }
        for (int k = 0; k < D; k++) {
            centers[j][k] = numerator[k] / denominator;
        }
    }
}

// Function to update membership matrix
void updateMembership() {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < C; j++) {
            double sum = 0.0;
            double dist_ij = 0.0;

            // Distance from point i to cluster j
            for (int k = 0; k < D; k++) {
                dist_ij += pow(data[i][k] - centers[j][k], 2);
            }
            dist_ij = sqrt(dist_ij);

            for (int l = 0; l < C; l++) {
                double dist_il = 0.0;
                for (int k = 0; k < D; k++) {
                    dist_il += pow(data[i][k] - centers[l][k], 2);
                }
                dist_il = sqrt(dist_il);

                // Avoid division by zero
                if (dist_il == 0.0) dist_il = 1e-6;

                sum += pow(dist_ij / dist_il, 2.0 / (M - 1.0));
            }
            U[i][j] = 1.0 / sum;
        }
    }
}

// Display function
void display() {
    printf("\nCluster Centers:\n");
    for (int j = 0; j < C; j++) {
        printf("Cluster %d: (", j + 1);
        for (int k = 0; k < D; k++) {
            printf("%.4lf", centers[j][k]);
            if (k < D - 1) printf(", ");
        }
        printf(")\n");
    }

    printf("\nMembership Matrix:\n");
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < C; j++) {
            printf("%.4lf ", U[i][j]);
        }
        printf("\n");
    }
}

int main() {
    printf("Enter number of data points: ");
    scanf("%d", &N);

    printf("Enter %d data points (x y):\n", N);
    for (int i = 0; i < N; i++) {
        scanf("%lf %lf", &data[i][0], &data[i][1]);
    }

    printf("Enter initial membership matrix (%d x %d values):\n", N, C);
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < C; j++) {
            scanf("%lf", &U[i][j]);
        }
    }

    printf("\nInitial Membership Matrix:\n");
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < C; j++) {
            printf("%.4lf ", U[i][j]);
        }
        printf("\n");
    }

    for (int t = 1; t <= ITER; t++) {
        printf("\n--- Iteration %d ---\n", t);
        updateCenters();
        display();
        updateMembership();
    }

    return 0;
}
---------------------------+-++---
-----++++++------++++++------++++---